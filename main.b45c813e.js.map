{"version":3,"sources":["scripts/main.js"],"names":["columns","rows","document","querySelectorAll","cells","cellsInRow","map","row","startCellVelues","startButton","querySelector","startMessage","loseMessage","winMessage","gameScore","winScore","i","j","push","children","clearCells","started","rotated","randomCellFill","length","randomIndex","someArr","Math","floor","random","randomCell","randomValue","classList","innerText","splice","indexOf","start","style","restart","add","forEach","cell","className","isMergePossible","wholeField","line","moveUp","rotateCells","reverse","moveDown","moveRight","moveLeft","arrowMove","direction","remove","removeAttribute","deleteElement","element","rotateElement","curr","prev","cellMerge","value","dataset","blocked","moveAllowed","includes","mergeAllowed","addEventListener","evt","key","preventDefault"],"mappings":"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","file":"main.b45c813e.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst columns = [[], [], [], []];\nconst rows = [...document.querySelectorAll('.field-row')];\nconst cells = document.querySelectorAll('.field-cell');\nconst cellsInRow = rows.map((row) => [...row.querySelectorAll('.field-cell')]);\nconst startCellVelues = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\nconst winScore = 2048;\n\nfor (let i = 0; i < 4; i++) {\n  for (let j = 0; j < 4; j++) {\n    columns[j].push(rows[i].children[j]);\n  }\n}\n\nlet clearCells = [...cells];\nlet started = false;\nlet rotated = false;\n\nfunction randomCellFill() {\n  if (!clearCells.length) {\n    return;\n  }\n\n  const randomIndex = (someArr) => Math.floor(Math.random() * someArr.length);\n  const randomCell = clearCells[randomIndex(clearCells)];\n  const randomValue = startCellVelues[randomIndex(startCellVelues)];\n\n  randomCell.classList = (`field-cell field-cell--${randomValue}`);\n  randomCell.innerText = randomValue;\n\n  clearCells.splice(clearCells.indexOf(randomCell), 1);\n}\n\nconst start = () => {\n  startMessage.style = 'display: none;';\n  startButton.classList = 'button restart';\n  startButton.innerText = 'Restart';\n\n  randomCellFill();\n  randomCellFill();\n  started = true;\n};\n\nconst restart = () => {\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  clearCells = [...cells];\n  gameScore.innerText = 0;\n\n  cells.forEach(cell => {\n    cell.innerText = '';\n    cell.className = 'field-cell';\n  });\n\n  randomCellFill();\n  randomCellFill();\n};\n\nfunction isMergePossible() {\n  const wholeField = [...cellsInRow, ...columns];\n\n  for (const line of wholeField) {\n    for (let i = 0; i < 3; i++) {\n      if (line[i].innerText === line[i + 1].innerText) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction moveUp() {\n  for (const column of columns) {\n    rotateCells([...column].reverse());\n  }\n}\n\nfunction moveDown() {\n  for (const column of columns) {\n    rotateCells(column);\n  }\n}\n\nfunction moveRight() {\n  for (const row of cellsInRow) {\n    rotateCells(row);\n  }\n}\n\nfunction moveLeft() {\n  for (const row of cellsInRow) {\n    rotateCells([...row].reverse());\n  }\n}\n\nfunction arrowMove(direction) {\n  if (!clearCells.length && !isMergePossible()) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  switch (direction) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n    case 'ArrowDown':\n      moveDown();\n      break;\n    case 'ArrowRight':\n      moveRight();\n      break;\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n  }\n\n  cells.forEach(cell => {\n    cell.removeAttribute('data-blocked');\n  });\n}\n\nfunction deleteElement(element) {\n  element.innerText = '';\n  element.className = 'field-cell';\n  clearCells.push(element);\n}\n\nfunction rotateElement(curr, prev) {\n  curr.innerText = prev.innerText;\n  curr.className = prev.className;\n  clearCells.splice(clearCells.indexOf(curr), 1);\n  deleteElement(prev);\n}\n\nfunction cellMerge(curr, prev) {\n  const value = curr.innerText * 2;\n\n  curr.innerText = value;\n  curr.className = `field-cell field-cell--${value}`;\n  gameScore.innerText = +gameScore.innerText + value;\n  deleteElement(prev);\n\n  curr.dataset.blocked = true;\n  prev.dataset.blocked = true;\n\n  if (value === winScore) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction rotateCells(line) {\n  for (let i = 3; i > 0; i--) {\n    const moveAllowed = clearCells.includes(line[i])\n      && !clearCells.includes(line[i - 1]);\n\n    const mergeAllowed = line[i].innerText === line[i - 1].innerText\n      && line[i].innerText.length\n      && !line[i - 1].dataset.blocked;\n\n    if ((mergeAllowed || moveAllowed) && !rotated) {\n      rotated = true;\n    }\n\n    if (mergeAllowed) {\n      cellMerge(line[i], line[i - 1]);\n      rotateCells(line);\n    }\n\n    if (moveAllowed) {\n      rotateElement(line[i], line[i - 1]);\n      rotateCells(line);\n    }\n  }\n}\n\ndocument.addEventListener('keydown', (evt) => {\n  const arrowDirections = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n  if (arrowDirections.includes(evt.key)) {\n    evt.preventDefault();\n    arrowMove(evt.key);\n\n    if (rotated) {\n      randomCellFill();\n      rotated = false;\n    }\n  }\n});\n\nstartButton.addEventListener('click', () => {\n  if (!started) {\n    start();\n  } else {\n    restart();\n  }\n});\n"]}